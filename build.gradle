import org.w3c.dom.Element
import org.w3c.dom.Node
import org.xml.sax.ContentHandler
import org.xml.sax.DTDHandler
import org.xml.sax.EntityResolver
import org.xml.sax.ErrorHandler
import org.xml.sax.InputSource
import org.xml.sax.SAXException
import org.xml.sax.SAXNotRecognizedException
import org.xml.sax.SAXNotSupportedException
import org.xml.sax.XMLReader

import javax.xml.XMLConstants
import javax.xml.parsers.DocumentBuilderFactory
import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}
plugins {
    id 'java-library'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'eclipse'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

group = "io.github.matyrobbrt"
archivesBaseName = "asmutils"
version = getVersion("")

repositories {
    jcenter()
    mavenCentral()
}

def asmVersion = '9.2'
def libraries = [
        "org.ow2.asm:asm"        : asmVersion,
        "org.ow2.asm:asm-commons": asmVersion,
        "org.ow2.asm:asm-tree"   : asmVersion,

        "org.slf4j:slf4j-api"    : '1.7.36'
]

dependencies {
    libraries.each { entry ->
        implementation("$entry.key:$entry.value")
    }
    compileOnly group: 'org.jetbrains', name: 'annotations', version: '23.0.0'
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.36'
    testImplementation group: 'io.github.cdimascio', name: 'dotenv-java', version: '2.2.3'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.22.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.8.2'
}

license {
    header = file("$rootDir/licenseheader.txt")
    properties {
        name = 'Matyrobbrt'
        year = 2022
    }

    include '**/*.java'
}

java {
    withJavadocJar()
    withSourcesJar()
}

allprojects {
    compileJava {
        options.release = 17
    }
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'io.codearte.nexus-staging'
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = "asmutils"
                    description = "A library consisting of ASM utilities."
                    url = 'https://github.com/Matyrobbrt/ASMUtils'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            id = 'matyrobbrt'
                            name = 'Matyrobbrt'
                            email = 'matyrobbrt@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git:github.com/matyrobbrt/asmutils.git'
                        developerConnection = 'scm:git:ssh://github.com/Matyrobbrt/ASMUtils.git'
                        url = 'https://github.com/Matyrobbrt/ASMUtils'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = project.hasProperty("snapshot") ?
                        "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                        : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = findProperty("ossrhUser") ? ossrhUser : ""
                    password = findProperty("ossrhPassword") ? ossrhPassword : ""
                }
            }
        }
    }
    signing {
        sign publishing.publications.mavenJava
    }
    nexusStaging {
        serverUrl = "https://s01.oss.sonatype.org/service/local/"
        username = findProperty("ossrhUser") ? ossrhUser : ""
        password = findProperty("ossrhPassword") ? ossrhPassword : ""
    }
    if (project.hasProperty("close")) {
        tasks.publish.finalizedBy closeAndReleaseRepository
    }
    jar {
        destinationDirectory = file("./build/libs/${version}/")
    }
    javadocJar {
        destinationDirectory = file("./build/libs/${version}/")
    }
    sourcesJar {
        destinationDirectory = file("./build/libs/${version}/")
    }
}

String getVersion(String nothing) {
    if ((properties.get("version") as String) != "unspecified") {
        return (properties.get("version") as String)
    } else if (properties.containsKey("commitMessage")) {
        var commitMessage = (properties.get("commitMessage") as String).toLowerCase(Locale.ROOT)
        final var startIndex = commitMessage.indexOf("[v")
        if (startIndex != -1) {
            commitMessage = commitMessage.substring(startIndex + 2)
            final var endIndex = commitMessage.indexOf(']');
            if (endIndex != -1) {
                var version = commitMessage.substring(0, endIndex)
                switch (version.toLowerCase(Locale.ROOT)) {
                    case "major": version = getNextVersionFromMavenInfo(IncreaseType.MAJOR)
                        break
                    case "minor": version = getNextVersionFromMavenInfo(IncreaseType.MINOR)
                        break
                    case "bug": version = getNextVersionFromMavenInfo(IncreaseType.BUG)
                }
                return version;
            }
        }
    }
    return getNextVersionFromMavenInfo(IncreaseType.MINOR)
}

String getNextVersionFromMavenInfo(final IncreaseType increaseType) {
    final var parser = DocumentBuilderFactory.newInstance();
    parser.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

    final var builder = parser.newDocumentBuilder();
    try (final var is = new URL("https://repo1.maven.org/maven2/io/github/matyrobbrt/asmutils/maven-metadata.xml").openStream()) {
        final var xml = builder.parse(is);
        xml.getDocumentElement().normalize()
        String latestVersion = (((xml.getElementsByTagName("metadata").item(0) as Element)
                .getElementsByTagName("versioning").item(0) as Element)
                .getElementsByTagName("latest").item(0) as Element).getTextContent();
        var major = Integer.parseInt(latestVersion.substring(0, latestVersion.indexOf(".")))
        latestVersion = latestVersion.substring(latestVersion.indexOf(".") + 1)
        var minor = Integer.parseInt(latestVersion.substring(0, latestVersion.indexOf(".")))
        latestVersion = latestVersion.substring(latestVersion.indexOf("."))
        var bug = Integer.parseInt(latestVersion.substring(1))
        switch (increaseType) {
            case IncreaseType.MAJOR: {
                major++
                minor = 0
                bug = 0
            }
                break
            case IncreaseType.MINOR: {
                minor++
                bug = 0
            }
                break
            case IncreaseType.BUG: bug++
                break
        }
        return "$major.$minor.$bug"
    }
}

enum IncreaseType {
    MAJOR, MINOR, BUG;
}

compileJava.options.encoding = "UTF-8"